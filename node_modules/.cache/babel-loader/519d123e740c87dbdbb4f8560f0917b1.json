{"ast":null,"code":"var helper = {\n  random: function random(n) {\n    return Math.round(Math.random() * n);\n  },\n  mod: function mod(dividend, divisor) {\n    return Math.round(dividend - Math.floor(dividend / divisor) * divisor);\n  },\n  sumNumbers: function sumNumbers(numbers) {\n    return numbers.slice().reverse().reduce(function (a, b, i) {\n      return a + b * (i + 2);\n    }, 0);\n  },\n  defaultMask: 'xxx.xxx.xxx-xx',\n  defaultPlaceholder: 'x',\n  gerarCPF: function (mask, placeholder) {\n    var numbers = [];\n    var last;\n    var result;\n\n    while (numbers.length < 9) {\n      numbers[numbers.length] = this.random(9);\n    }\n\n    while (numbers.length < 11) {\n      last = 11 - this.mod(this.sumNumbers(numbers), 11);\n\n      if (last >= 10) {\n        last = 0;\n      }\n\n      numbers[numbers.length] = last;\n    }\n\n    result = numbers.join('');\n\n    if (typeof mask === 'boolean' && mask) {\n      mask = this.defaultMask;\n    }\n\n    if (mask && mask.length) {\n      if (typeof placeholder === 'undefined') {\n        placeholder = this.defaultPlaceholder;\n      }\n\n      if (mask.match(new RegExp(placeholder, 'g')).length < 11) {\n        throw new Error('The CPF mask should contain 11 placeholders');\n      }\n\n      var placeholderRegex = new RegExp(placeholder);\n      var i = -1;\n\n      while (++i < 11) {\n        mask = mask.replace(placeholderRegex, result[i]);\n      }\n\n      result = mask;\n    }\n\n    return result;\n  },\n  gerarCNPJ: function (comPontos) {\n    var cnpj = '';\n    var n = 9;\n    var n1 = this.random(n);\n    var n2 = this.random(n);\n    var n3 = this.random(n);\n    var n4 = this.random(n);\n    var n5 = this.random(n);\n    var n6 = this.random(n);\n    var n7 = this.random(n);\n    var n8 = this.random(n);\n    var n9 = 0; // random(n);\n\n    var n10 = 0; // random(n);\n\n    var n11 = 0; // random(n);\n\n    var n12 = 1; // random(n);\n\n    var d1 = n12 * 2 + n11 * 3 + n10 * 4 + n9 * 5 + n8 * 6 + n7 * 7 + n6 * 8 + n5 * 9 + n4 * 2 + n3 * 3 + n2 * 4 + n1 * 5;\n    d1 = 11 - this.mod(d1, 11);\n    if (d1 >= 10) d1 = 0;\n    var d2 = d1 * 2 + n12 * 3 + n11 * 4 + n10 * 5 + n9 * 6 + n8 * 7 + n7 * 8 + n6 * 9 + n5 * 2 + n4 * 3 + n3 * 4 + n2 * 5 + n1 * 6;\n    d2 = 11 - this.mod(d2, 11);\n    if (d2 >= 10) d2 = 0;\n    if (comPontos) cnpj = '' + n1 + n2 + '.' + n3 + n4 + n5 + '.' + n6 + n7 + n8 + '/' + n9 + n10 + n11 + n12 + '-' + d1 + d2;else cnpj = '' + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9 + n10 + n11 + n12 + d1 + d2;\n    return cnpj;\n  },\n  generateRandomString: function (num) {\n    return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, num);\n  }\n};\nexport default helper;","map":{"version":3,"sources":["/home/roberto/Documentos/projetos/extensao-gerar-cpf-cnpj/src/Helpers/geraCPF.js"],"names":["helper","random","n","Math","round","mod","dividend","divisor","floor","sumNumbers","numbers","slice","reverse","reduce","a","b","i","defaultMask","defaultPlaceholder","gerarCPF","mask","placeholder","last","result","length","join","match","RegExp","Error","placeholderRegex","replace","gerarCNPJ","comPontos","cnpj","n1","n2","n3","n4","n5","n6","n7","n8","n9","n10","n11","n12","d1","d2","generateRandomString","num","toString","substr"],"mappings":"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","sourcesContent":["var helper = {\n    random: function random(n) {\n        return Math.round(Math.random() * n);\n    },\n    mod: function mod(dividend, divisor) {\n        return Math.round(dividend - (Math.floor(dividend / divisor) * divisor));\n    },\n\n    sumNumbers: function sumNumbers(numbers) {\n        return numbers.slice().reverse().reduce(function (a, b, i) {\n            return a + (b * (i + 2));\n        }, 0);\n    },\n    defaultMask: 'xxx.xxx.xxx-xx',\n    defaultPlaceholder: 'x',\n    gerarCPF: function (mask, placeholder) {\n        \n        var numbers = [];\n        var last;\n        var result;\n\n        while (numbers.length < 9) {\n            numbers[numbers.length] = this.random(9);\n        }\n\n        while (numbers.length < 11) {\n            last = 11 - this.mod(this.sumNumbers(numbers), 11);\n\n            if (last >= 10) {\n                last = 0;\n            }\n\n            numbers[numbers.length] = last;\n        }\n\n        result = numbers.join('');\n\n        if (typeof mask === 'boolean' && mask) {\n            mask = this.defaultMask;\n        }\n\n        if (mask && mask.length) {\n            if (typeof placeholder === 'undefined') {\n                placeholder = this.defaultPlaceholder;\n            }\n\n            if (mask.match(new RegExp(placeholder, 'g')).length < 11) {\n                throw new Error('The CPF mask should contain 11 placeholders');\n            }\n\n            var placeholderRegex = new RegExp(placeholder);\n            var i = -1;\n\n            while (++i < 11) {\n                mask = mask.replace(placeholderRegex, result[i]);\n            }\n\n            result = mask;\n        }\n\n        return result;\n    },\n    gerarCNPJ: function( comPontos) {\n\n        var cnpj = '';\n\n        var n = 9;\n        var n1 = this.random(n);\n        var n2 = this.random(n);\n        var n3 = this.random(n);\n        var n4 = this.random(n);\n        var n5 = this.random(n);\n        var n6 = this.random(n);\n        var n7 = this.random(n);\n        var n8 = this.random(n);\n        var n9 = 0; // random(n);\n        var n10 = 0; // random(n);\n        var n11 = 0; // random(n);\n        var n12 = 1; // random(n);\n        var d1 = n12 * 2 + n11 * 3 + n10 * 4 + n9 * 5 + n8 * 6 + n7 * 7 + n6 * 8\n                + n5 * 9 + n4 * 2 + n3 * 3 + n2 * 4 + n1 * 5;\n        d1 = 11 - (this.mod(d1, 11));\n        if (d1 >= 10)\n            d1 = 0;\n        var d2 = d1 * 2 + n12 * 3 + n11 * 4 + n10 * 5 + n9 * 6 + n8 * 7 + n7 * 8\n                + n6 * 9 + n5 * 2 + n4 * 3 + n3 * 4 + n2 * 5 + n1 * 6;\n        d2 = 11 - (this.mod(d2, 11));\n        if (d2 >= 10)\n            d2 = 0;\n        if (comPontos)\n            cnpj = '' + n1 + n2 + '.' + n3 + n4 + n5 + '.' + n6 + n7 + n8 + '/'\n                    + n9 + n10 + n11 + n12 + '-' + d1 + d2;\n        else\n            cnpj = '' + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9 + n10 + n11\n                    + n12 + d1 + d2;\n    \n        return cnpj;\n    \n    },\n    generateRandomString: function(num){\n        return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, num);\n    }\n};\n\nexport default helper"]},"metadata":{},"sourceType":"module"}